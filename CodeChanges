BOARD
- if statements modified to switch colours of pieces
- new getPiece that takes a vector arguement so that mouse clicks can be used
- getPiece modified to throw an exception if the piece is not found
- getPieceArray added to return the entire array of pieces
- movePiece function added 

CLASS1
- new module added WHY

FILEIO
- new class added
- allows for saving and loading of games 
- has a save and load function

GAME1
- new enumerated variable added: PLAYER_TURN
- new variables added: currentPlayerTurn, fileIO 
- new Texture2D variables: Menu_ButtonLoad, Playing_ButtonSave
- new View_Clickable: Playing_ButtonSave, clickable_SaveButton
- board_SquareSize has been changed into a constant
- new Vector2 variable: mouseBoardPosition
- graphics changed to include new load button 
- switching of players turn added
- new restrictions on dragging ability so that pieces only moved correctly
- added more detailed clicking ability to restrict the movement of pieces on the correct turn
- actions upon clicking updated to allow for full playing
- takeInput function added that sets up the board if there is a file to open
- added setValidMovements functions to give every piece on the board the squares they can move to

BOARD INTERFACE
- added function:    getPiece
					getPieceArray
					movePiece

FILE IO INTERFACE
- interface added with save and load

PIECE INTERFACE
- getValidMovents and setValidMovements added

PIECE
- added a validMovements struct that holds all of the information about a pieces valid movement
- added an enumerated variable containing the valid movement directions
- added a getValidMovement function that returns the array of valid movements
- added a setValidMovements function that gives a piece the squares it is able to move to

VIEW CLICKABLE
- new boardCoords variable added
- new constructor added to save the information of a piece if it has said information
- added a getCoords function that returns the coordinates of the board


MIS
Types
validMovementsStruct structure that holds the valid movements
typeState enumerate if the piece is normal or king
player enumerate if piece owned by Black or White

Constants
none

AccessPrograms
getType() : typeState Retrieves the piece's current type.
getOwner() : player Says who owns the piece.
getValidMovements() Retrieves the movements that a piece can make.
setType(newType : typeState) Changes the piece's type.
setValidMovements (direction : validMoveDirection, col : int, row : int) Assigns the valid movements for a piece.


MID
VARIABLES
pieceType : typeState holds current piece type
owner : player holds information of the piece's owner
validMovementsArray : an array holding all the valid movements for a piece.

ACCESS PROGRAMS
getType() : typeState
Inputs None
Updates None
Outputs pieceType
Description Returns the current type of the piece.

setType(newType : typeState)
Inputs newType
Updates None
Outputs pieceType
Description Changes the type of piece to the type given.

getOwner() : player
Inputs None
Updates None
Outputs owner
Description Returns which player the piece is owned by.
 
getValidMovements() : validMovementsStruct[]
Inputs None
Updates None
Output validMovementsArray
Description Returns an array of the valid movements for a particular piece.

setValidMovements(direction : validMoveDirection, col : int, row : int)
Inputs direction, col, row
Updates None
Outputs validMovementsArray
Description Sets the places that are valid for a specific piece to move.